---
- pause:
    prompt: |
          Storage interface:
          - file
          - block
  register: ocs_protocol

- pause:
    prompt: |
          Valid I/O type:
          - read
          - write
          - randwrite
          - randread
          - readwrite
          - randrw
  register: io_type

- pause:
    prompt: |
          Valid I/O size in KB example:
          - 4, 8, 16, 32, 64, 128, 256, 1024, 2048, 4096 ?
  register: io_size

- pause:
    prompt: |
          Valid io_threads example:
          - 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096
  register: io_threads

- pause:
    prompt: |
          IO in GB total in GB (max 100):
  register: io_total

- pause:
    prompt: |
          IO rw_mix_read:
  register: rwmixread
  when: io_type.user_input == "readwrite" or io_type.user_input == "randrw"

- pause:
    prompt: |
          IO rwmixwrite:
  register: rwmixwrite
  when: io_type.user_input == "readwrite" or io_type.user_input == "randrw"


- name: Collect fio-{{ ocs_protocol.user_input }}-ceph-tool pod names
  shell: |
    export KUBECONFIG={{ kubeconfig }}
    oc get pods -n {{ name_space }} -l app=fio-{{ ocs_protocol.user_input }}-ceph-tools -o name -o=jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}'
  register: fio_ceph_tool_pods

- name: fio bench mixed rbd rw
  shell: |
    export KUBECONFIG={{ kubeconfig }}
    oc exec -n {{ name_space }} {{ item }} -it -- fio --randrepeat=1 --ioengine=libaio --direct=1 --gtod_reduce=1 --name=test --directory=/usr/share/ocs-pvc --bs={{ io_size.user_input }}K --iodepth={{ io_threads.user_input }} --size={{ io_total.user_input }}G --rw={{ io_type.user_input }} --rwmixread={{ rwmixread.user_input }} --rwmixwrite={{ rwmixwrite.user_input }} --nrfiles={{ io_total.user_input|int|round(0,'common') * 1024 / io_size.user_input|int|round(0,'common') }} --refill_buffers=1
  loop: "{{ fio_ceph_tool_pods.stdout_lines }}"
  register: _create_instances
  async: 3600  # Maximum runtime in seconds. Adjust as needed.
  poll: 0  # Fire and continue (never poll)
  when: io_type.user_input == "readwrite" or io_type.user_input == "randrw"

- name: Wait for fio mixed rw jobs to finish
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: _jobs
  until: _jobs.finished
  delay: 10  # Check every 5 seconds. Adjust as you like.
  retries: 360  # Retry up to 10 times. Adjust as needed.
  loop: "{{ _create_instances.results }}"
  when: io_type.user_input == "readwrite" or io_type.user_input == "randrw"

- name: Print benchmarks stats
  debug:
    msg: "{{ item.stdout_lines }}"
  loop: "{{ _jobs.results }}"
  when: io_type.user_input == "readwrite" or io_type.user_input == "randrw"

- name: fio bench read, write, randwrite
  shell: |
    export KUBECONFIG={{ kubeconfig }}
    oc exec -n {{ name_space }} {{ item }} -it -- fio --randrepeat=1 --ioengine=libaio --direct=1 --gtod_reduce=1 --name=test --directory=/usr/share/ocs-pvc --bs={{ io_size.user_input }}K --iodepth={{ io_threads.user_input }} --size={{ io_total.user_input }}G --rw={{ io_type.user_input }} --nrfiles={{ io_total.user_input|int|round(0,'common') * 1024 / io_size.user_input|int|round(0,'common') }} --refill_buffers=1
  loop: "{{ fio_ceph_tool_pods.stdout_lines }}"
  register: _create_instances
  async: 3600  # Maximum runtime in seconds. Adjust as needed.
  poll: 0  # Fire and continue (never poll)
  when: io_type.user_input == "read" or io_type.user_input == "write" or io_type.user_input == "randwrite" or io_type.user_input == "randread"

- name: Wait for fio jobs to finish
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: _jobs
  until: _jobs.finished
  delay: 10  # Check every 10 seconds. Adjust as you like.
  retries: 360  # Retry up to 360 times. Adjust as needed.
  loop: "{{ _create_instances.results }}"
  when: io_type.user_input == "read" or io_type.user_input == "write" or io_type.user_input == "randwrite" or io_type.user_input == "randread"

- name: Print benchmarks stats
  debug:
    msg: "{{ item.stdout_lines }}"
  loop: "{{ _jobs.results }}"
  when: io_type.user_input == "read" or io_type.user_input == "write" or io_type.user_input == "randwrite" or io_type.user_input == "randread"
